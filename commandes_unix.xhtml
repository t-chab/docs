<?xml version="1.0"
      encoding="utf-8"
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Guide de survie sous Unix</title>
<meta name="generator" content="http://txt2tags.org" />
</head>
<body bgcolor="white" text="black">
<div align="center">
<h1>Guide de survie sous Unix</h1>
<h2>&lt;tchabaud@sqli.com&gt;</h2>
<h3>Dernière mise à jour: Thu Sep 27 22:31:53 2012</h3>
</div>

<p></p>
<hr class="light" />
<p></p>

  <ol>
  <li><a href="#toc1">Commandes Unix</a>
  </li>
  <li><a href="#toc2">Shell</a>
    <ul>
    <li><a href="#toc3">2.1. Edition de la ligne de commande</a>
    </li>
    <li><a href="#toc4">2.2. echo</a>
    </li>
    </ul>
  </li>
  <li><a href="#toc5">Documentation</a>
    <ul>
    <li><a href="#toc6">3.1. man</a>
    </li>
    </ul>
  </li>
  <li><a href="#toc7">Gestion des fichiers</a>
    <ul>
    <li><a href="#toc8">4.1. cat</a>
    </li>
    <li><a href="#toc9">4.2. pwd</a>
    </li>
    <li><a href="#toc10">4.3. cd</a>
    </li>
    <li><a href="#toc11">4.4. ls</a>
    </li>
    <li><a href="#toc12">4.5. mv</a>
    </li>
    <li><a href="#toc13">4.6. cp</a>
    </li>
    <li><a href="#toc14">4.7. chmod</a>
    </li>
    <li><a href="#toc15">4.8. find</a>
    </li>
    <li><a href="#toc16">4.9. du</a>
    </li>
    <li><a href="#toc17">4.10. df</a>
    </li>
    </ul>
  </li>
  <li><a href="#toc18">Manipulation de fichiers textes</a>
    <ul>
    <li><a href="#toc19">5.1. head</a>
    </li>
    <li><a href="#toc20">5.2. tail</a>
    </li>
    <li><a href="#toc21">5.3. more</a>
    </li>
    <li><a href="#toc22">5.4. less</a>
    </li>
    <li><a href="#toc23">5.5. sort</a>
    </li>
    <li><a href="#toc24">5.6. uniq</a>
    </li>
    <li><a href="#toc25">5.7. grep</a>
    </li>
    <li><a href="#toc26">5.8. awk</a>
    </li>
    <li><a href="#toc27">5.9. cut</a>
    </li>
    <li><a href="#toc28">5.10. paste</a>
    </li>
    <li><a href="#toc29">5.11. vim</a>
      <ul>
      <li><a href="#toc30">5.11.1. Description</a>
      </li>
      <li><a href="#toc31">5.11.2. Commandes principales</a>
      </li>
      <li><a href="#toc32">5.11.3. Raccourcis claviers</a>
      </li>
      <li><a href="#toc33">5.11.4. Copier/coller</a>
      </li>
      <li><a href="#toc34">5.11.5. Comparaison de fichier</a>
      </li>
      </ul>
    </li>
    </ul>
  </li>
  <li><a href="#toc35">Informations Système</a>
    <ul>
    <li><a href="#toc36">6.1. dmesg</a>
    </li>
    <li><a href="#toc37">6.2. free</a>
    </li>
    <li><a href="#toc38">6.3. /proc/cpuinfo</a>
    </li>
    <li><a href="#toc39">6.4. /proc/meminfo</a>
    </li>
    <li><a href="#toc40">6.5. uname</a>
    </li>
    </ul>
  </li>
  <li><a href="#toc41">Autres commandes</a>
    <ul>
    <li><a href="#toc42">7.1. mount</a>
    </li>
    <li><a href="#toc43">7.2. tar</a>
    </li>
    <li><a href="#toc44">7.3. basename</a>
    </li>
    </ul>
  </li>
  <li><a href="#toc45">Planification avec cron</a>
  </li>
  <li><a href="#toc46">Notion de pipe</a>
  </li>
  <li><a href="#toc47">Remerciements</a>
  </li>
  <li><a href="#toc48">Bibliographie</a>
  </li>
  </ol>

<p></p>
<hr class="light" />
<p></p>

<a id="toc1" name="toc1"></a>
<h1>1. Commandes Unix</h1>

<hr class="heavy" />

<hr class="heavy" />

<a id="toc2" name="toc2"></a>
<h1>2. Shell</h1>

<p>
L'appellation <i>shell</i> désigne la plupart du temps dans le monde Unix un interpréteur de lignes de commandes. Pour des raisons de concision, cette documentation ne traite que du shell <i>bash</i>, qui est utilisé par défaut sur les distributions Linux et Mac OS X.
Les principaux raccourcis clavier du shell <i>bash</i> sont les suivants :
</p>

<a id="toc3" name="toc3"></a>
<h2>2.1. Edition de la ligne de commande</h2>

<p>
Complète la commande
</p>

<pre>
  Tab
</pre>

<p>
ou
</p>

<pre>
  Ctrl-i
</pre>

<p>
Déconnecte l'utilisateur (équivalent d'un <i>exit</i>)
</p>

<pre>
  Ctrl-d
</pre>

<p>
Efface l'écran (équivalent de la commande <i>clear</i>)
</p>

<pre>
  Ctrl-l
</pre>

<p>
Envoie le curseur en début de ligne
</p>

<pre>
  Ctrl-a
</pre>

<p>
Envoie le curseur en fin de ligne
</p>

<pre>
  Ctrl-e
</pre>

<p>
Commande précédente dans l'historique
</p>

<pre>
  Ctrl-p
</pre>

<p>
Commande suivante dans l'historique
</p>

<pre>
  Ctrl-n
</pre>

<p>
Rappelle la dernière commande commençant par <i>uneChaine</i>
</p>

<pre>
  !uneChaine
</pre>

<p>
Interrompt la commande en cours
</p>

<pre>
  Ctrl-c
</pre>

<p>
Met en pause le process courant (envoi d'un signal <b>SIGSTP</b>). Il faut utiliser la commande <i>fg</i> pour le reprendre.
</p>

<pre>
  Ctrl-z
</pre>

<a id="toc4" name="toc4"></a>
<h2>2.2. echo</h2>

<p>
La commande <i>echo</i> permet d'afficher une ligne de texte à l'écran.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche <i>Ceci est une ligne de texte</i> sur l'écran
</p>

<pre>
  echo Ceci est une ligne de texte
</pre>

<p>
Affiche <i>test</i> suivi de 5 retours chariots sur l'écran. L'option <i>-e</i> est indispensable pour que les <i>\n</i> soient
interprétés comme des retour chariots.
</p>

<pre>
  echo -e "test\n\n\n\n\n"
</pre>

<a id="toc5" name="toc5"></a>
<h1>3. Documentation</h1>

<a id="toc6" name="toc6"></a>
<h2>3.1. man</h2>

<p>
La commande <i>man</i> permet d'afficher le manuel d'utilisation de la commande passé en argument.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche l'aide de la commande <i>ls</i>, avec le détail des options.
</p>

<pre>
  man ls
</pre>

<p>
    Convertit le manuel de la commande <i>bash</i> en fichier Postscript.
</p>

<pre>
  man -t bash &gt; bash.ps
</pre>

<p>
    Convertit le manuel de la commande <i>bash</i> en fichier PDF.
</p>

<pre>
  man -t bash | ps2pdf - &gt; bash.pdf
</pre>

<a id="toc7" name="toc7"></a>
<h1>4. Gestion des fichiers</h1>

<a id="toc8" name="toc8"></a>
<h2>4.1. cat</h2>

<p>
La commande <i>cat</i> permet de concaténer des fichiers, mais aussi d'envoyer le contenu d'un fichier sur la sortie
standard.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Afficher le contenu du fichier <i>document.txt</i>
</p>

<pre>
  cat document.txt
</pre>

<p>
Concatène les 3 fichiers <i>fic1</i>,<i>fic2</i> et <i>fic3</i> dans le fichier <i>fusion</i>
</p>

<pre>
  cat fic1 fic2 fic3 &gt; fusion
</pre>

<a id="toc9" name="toc9"></a>
<h2>4.2. pwd</h2>

<p>
La commande <i>pwd</i> affiche le répertoire courant.
</p>

<a id="toc10" name="toc10"></a>
<h2>4.3. cd</h2>

<p>
La commande <i>cd</i> permet de se déplacer dans le répertoire passé en argument.
Le caractère <i>-</i> permet de revenir au répertoire précédent. Le caractère <i>~</i> pointe vers le répertoire <i>home</i> de l'utilisateur courant.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Le répertoire courant devient <i>/usr</i> puis <i>/var</i> puis on revient ensuite dans le répertoire <i>/usr</i> avant de se déplacer dans le <i>home</i> de l'utilisateur.
</p>

<pre>
  cd /usr
</pre>

<pre>
  cd /var
</pre>

<pre>
  cd -
</pre>

<pre>
  cd ~
</pre>

<a id="toc11" name="toc11"></a>
<h2>4.4. ls</h2>

<p>
La commande <i>ls</i> permet de lister le contenu d'un répertoire.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Liste tous les fichiers (<i>-a</i>, c'est à dire même les fichiers cachés) avec un affichage détaillé (<i>-l</i>) en les triant par date (<i>-t</i>) du plus ancien au plus récent (<i>-r</i>, inverse l'ordre de tri).
</p>

<pre>
  ls -alrt
</pre>

<p>
    Liste tous les fichiers du répertoire <i>/var</i> mais n'affiche pas <i>.</i> (alias pour le répertoire courant) ni <i>../</i> (alias pour le répertoire parent)    
</p>

<pre>
  ls -A /var
</pre>

<a id="toc12" name="toc12"></a>
<h2>4.5. mv</h2>

<p>
La commande <i>mv</i> permet de renommer des fichiers / répertoires.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Renomme le fichier <i>http.conf</i> en <i>httpd.conf</i>
</p>

<pre>
  mv http.conf httpd.conf
</pre>

<a id="toc13" name="toc13"></a>
<h2>4.6. cp</h2>

<p>
La commande <i>cp</i> permet de copier des fichiers / répertoires.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Copie le contenu de <i>ficsrc</i> dans un second fichier nommé <i>ficdest</i>
</p>

<pre>
  cp ficsrc ficdest
</pre>

<a id="toc14" name="toc14"></a>
<h2>4.7. chmod</h2>

<p>
La commande <i>chmod</i> permet de changer les droits sur un fichier. Pour le détail du fonctionnement des droits Unix
voir [<a href="http://fr.wikipedia.org/wiki/Permissions_Unix">http://fr.wikipedia.org/wiki/Permissions_Unix</a>].
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Rend récursivement tous les fichiers du répertoire courant accessible en lecture/écriture par le propriétaire, et en lecture seule
pour le groupe et les autres utilisateurs.
</p>

<pre>
  chmod -R 644 *
</pre>

<p>
Rend exécutable le fichier <i>monScript.sh</i>. 
</p>

<pre>
  chmod +x monScript.sh
</pre>

<p>
Pour exécuter le fichier, se placer dans le répertoire parent et taper la commande suivante:
</p>

<pre>
  ./monScript.sh
</pre>

<a id="toc15" name="toc15"></a>
<h2>4.8. find</h2>

<p>
La commande <i>find</i> Permet de rechercher des fichiers dans l'arborescence du système de fichiers.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Recherche dans le répertoire <i>/usr</i> et dans tous ses sous répertoires tous les fichiers (-type f) dont le nom commence par <i>foo</i>
</p>

<pre>
  find /usr -type f -name "foo*"
</pre>

<p>
    Recherche dans le répertoire <i>~/photos</i> tous les fichiers qui se terminent par <i>.jpg</i> et exécute sur chaque élément
    trouvé la commande <i>convert</i> pour les convertir au format png.
</p>

<pre>
  find ~/photos/ -name "*.jpg" -exec convert {} `basename {} .jpg`.png \;
</pre>

<a id="toc16" name="toc16"></a>
<h2>4.9. du</h2>

<p>
La commande <i>du</i> permet de connaitre l'espace occupé par un fichier ou un répertoire.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche la taille totale du répertoire <i>/home</i>. L'option <i>-h</i> permet d'avoir une taile "human readable".
</p>

<pre>
  du -sh /home
</pre>

<a id="toc17" name="toc17"></a>
<h2>4.10. df</h2>

<p>
La commande <i>df</i> permet d'afficher l'espace disponible sur chacune des partitions du système.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche l'espace occupé et libre sur chacune des partitions du système. L'option <i>-h</i> permet d'avoir une taile "human readable".
</p>

<pre>
  df -h
</pre>

<a id="toc18" name="toc18"></a>
<h1>5. Manipulation de fichiers textes</h1>

<a id="toc19" name="toc19"></a>
<h2>5.1. head</h2>

<p>
La commande <i>head</i> affiche par défaut les 10 premières lignes du fichier passé en argument. Il est possible de
préciser le nombre de lignes ou la taille en (kilo) octets que l'on souhaite afficher.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche les 27 premières lignes du fichier document.txt
</p>

<pre>
  head -27 document.txt
</pre>

<p>
Affiche les 2 premiers ko du fichier document.txt
</p>

<pre>
  head -c 2K document.txt
</pre>

<a id="toc20" name="toc20"></a>
<h2>5.2. tail</h2>

<p>
La commande <i>tail</i> permet elle d'afficher la fin d'un fichier. L'option <i>-f</i> est particulièrement pratique, car elle
permet de scruter un fichier de log pour afficher immédiatement sur l'écran les mises à jour de ce fichier.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche les 5 dernières lignes du fichier toto.txt
</p>

<pre>
  tail -5 toto.txt
</pre>

<p>
Scrute le fichier <i>/var/log/messages.log</i> pour observer les modifications en temps réel.
</p>

<pre>
  tail -f /var/log/messages.log
</pre>

<a id="toc21" name="toc21"></a>
<h2>5.3. more</h2>

<p>
La commande <i>more</i> permet d'afficher de façon paginée le contenu d'un long fichier texte. Pour passer à la page
suivante, il faut appuyer sur <i>espace</i>.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche page par page le contenu du fichier <i>Xorg.0.log</i>
</p>

<pre>
  more /var/log/Xorg.0.log
</pre>

<p>
Affiche le fichier <i>monFichier.txt</i> en commençant à la ligne 53
</p>

<pre>
  more +53 monFichier.txt
</pre>

<a id="toc22" name="toc22"></a>
<h2>5.4. less</h2>

<p>
La commande <i>less</i> se définit comme l'opposé de la commande <i>more</i>. Elle propose les mêmes options : pour passer à
la page suivante, il faut utiliser la touche <i>espace</i>. Le retour à la page précédente se fait avec la touche <i>b</i>, et
il est possible de scruter un fichier de log comme avec <i>tail -f</i> en utilisant le raccourci <i>Shift-F</i>. Pour sortir
du mode "scrutation", il faut utiliser le raccourci <i>Ctrl-C</i>.
</p>

<a id="toc23" name="toc23"></a>
<h2>5.5. sort</h2>

<p>
La commande <i>sort</i> permet d'afficher le contenu concaténé et trié des fichiers passés en argument. Le tri est
alphabétique par défaut.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche sur la sortie standard les 3 fichiers <i>list1</i>, <i>list2</i> et <i>list3</i> triés numériquement.
</p>

<pre>
  sort -n list1 list2 list3
</pre>

<p>
Trie comme dans l'exemple précédent en supprimant les doublons
</p>

<pre>
  sort -u -n list1 list2 list3
</pre>

<a id="toc24" name="toc24"></a>
<h2>5.6. uniq</h2>

<p>
Cette commande permet de compter ou de supprimer des lignes en doublons.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche les lignes en doublons du fichier <i>list1</i>
</p>

<pre>
  uniq -d list1
</pre>

<p>
Affiche le nombre d'occurences de chaque ligne du fichier <i>liste.txt</i>. L'option -i permet d'ignorer la casse pour les
comparaisons (avec cette option , <i>aa</i>, <i>aA</i> et <i>AA</i> comptent pour 3 occurences de la même chaine).
</p>

<pre>
  uniq -i -c liste.txt
</pre>

<a id="toc25" name="toc25"></a>
<h2>5.7. grep</h2>

<p>
La commande <i>grep</i> permet d'effectuer des recherches de chaine de caractères dans des fichiers. La syntaxe est simple :
</p>

<pre>
  grep [chaine de recherche] [fichier ou répertoire]
</pre>

<p>
Les options les plus pratiques sont les suivantes :
</p>

<ul>
<li>-R : permet d'effectuer une recherche récursivement dans un répertoire
</li>
<li>-i : permet d'ignorer la casse
</li>
<li>-c : Supprime la sortie standard et affiche à la place le nombre de lignes correspondantes à la chaine de recherche dans chaque fichier en entrée.
</li>
<li>-A <i>N</i> : Affiche les <i>N</i> lignes  qui précédent chaque occurence de recherche.
</li>
<li>-B <i>N</i> : Idem que <i>-A</i> pour les lignes qui suivent chaque occurence de recherche.
</li>
<li>-C <i>N</i> : Affiche <i>N</i> lignes entourant l'occurence de recherche.
</li>
</ul>

<p>
Pour ces 3 dernières options, chaque groupe de lignes est séparé par la chaine <i>--</i>.
</p>

<a id="toc26" name="toc26"></a>
<h2>5.8. awk</h2>

<p>
La commande <i>awk</i> permet de nombreuses manipulations sur des fichiers textes. Un tutoriel est disponible ici
[<a href="http://nyal.developpez.com/tutoriel/gawk/index.php">http://nyal.developpez.com/tutoriel/gawk/index.php</a>]. Elle est très pratique pour réordonner les colonnes d'un fichier texte, ou le filtrer en n'affichant que certaines
colonnes. Les colonnes sont référencées par <i>$&lt;index&gt;</i>. Par exemple la colonne 3 est référencée par <i>$3</i>. <i>$0</i>
référence l'ensemble des colonnes d'une ligne. Le séparateur de champs par défaut est le caractère espace. Il est
également possible d'appeler plusieurs fonctions prédéfinies dans awk pour retraiter les champs, comme des fonctions
mathématiques (<i>sum()</i>,<i>log()</i>,<i>cos()</i>, etc ...) ou des fonctions de manipulation de chaines de
caractères (<i>split()</i>,<i>length()</i>, <i>substr()</i>, etc ...). Pour le détail des fonctions possibles, voir [<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din</a>]
</p>
<p>
<b><u>Syntaxe "one-line" :</u></b>
</p>

<pre>
  awk -F "&lt;séparateur&gt;" '{ suite de commandes [...] }'
</pre>

<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Affiche la 4e et la 8e colonne du fichier <i>foo.csv</i> ayant comme séparateur de champ le caractère <i>;</i>
    Les 2 colonnes sont séparées par le caractère espace.
</p>

<pre>
  awk -F ";" '{ print $4 " " $8}' foo.csv
</pre>

<p>
    Affiche le fichier system.log sans les 3 premières colonnes.
</p>

<pre>
  awk '{ print $1=$2=$3=""; print $0}' system.log
</pre>

<a id="toc27" name="toc27"></a>
<h2>5.9. cut</h2>

<p>
La commande <i>cut</i> permet de tailler des lignes de texte. Branchée sur un pipe, elle peut dans certains cas remplacer
<i>awk</i>. Il existe deux modes de fonctionnement :
</p>
<p>
Le mode sélection par colonne : cet exemple n'affiche que les caractères 7 à 23 de chaque ligne du fichier passé en
  argument :
</p>

<pre>
  cut -c7-23 //fichier// 
</pre>

<p>
Le mode sélection par champs : cet exemple va afficher les champs 3 <u>et</u> 6 du fichier en argument, en utilisant le
  caractère <i>;</i> comme séparateur de champ :
</p>

<pre>
  cut -d";" -f3,6 //fichier//
</pre>

<p>
Variante pour afficher les champs 3 <u>à</u> 6 :
</p>

<pre>
  cut -d";" -f3-6 //fichier//
</pre>

<p>
Remarque : si l'option <i>-s</i> n'est pas spécifiée, la commande affiche également les lignes qui ne contiennent aucun
caractère délimiteur de champs.
</p>

<a id="toc28" name="toc28"></a>
<h2>5.10. paste</h2>

<p>
La commande paste est complémentaire de <i>cut</i> et permet de fusionner des lignes.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
    Construit un CSV à partir des fichiers fic1, fic2 et fic3
</p>

<pre>
  paste -d";" fic1 fic2 fic3
</pre>

<a id="toc29" name="toc29"></a>
<h2>5.11. vim</h2>

<a id="toc30" name="toc30"></a>
<h3>5.11.1. Description</h3>

<p>
Vim est un éditeur de texte descendant de vi, et qui dispose de plusieurs modes d'éditions. Les plus utilisés sont le mode commande et le mode insertion.
</p>
<p>
Vim démarre en mode commande, qui permet notamment de sauvegarder, d'effectuer des recherches, copier du texte, etc ...
</p>
<p>
Pour passer du mode commande au mode édition, il faut utiliser la touche <b>i</b>.
La touche <b>Echap</b> permet de retourner au mode commande depuis le mode édition.
Pour saisir une commande dans le mode éponyme, il faut utiliser la syntaxe <i>:&lt;commande&gt;</i>
</p>

<a id="toc31" name="toc31"></a>
<h3>5.11.2. Commandes principales</h3>

<p>
Pour sauvegarder
</p>

<pre>
  :w
</pre>

<p>
Pour quitter
</p>

<pre>
  :q
</pre>

<p>
Pour sauvegarder et quitter
</p>

<pre>
  :wq
</pre>

<p>
Pour chercher la chaine "toto" dans le fichier courant
</p>

<pre>
  :/toto
</pre>

<p>
Envoie le curseur en fin de fichier
</p>

<pre>
  :$
</pre>

<p>
Positionne le curseur sur la ligne 15 du fichier courant
</p>

<pre>
  :15
</pre>

<p>
Utilise des fins de ligne Unix (\n) pour le fichier courant. Pour utiliser des fins de lignes DOS (\r\n), remplacer <i>unix</i> par
<i>dos</i>
</p>

<pre>
  :set ff=unix
</pre>

<p>
Supprime la ligne courante
</p>

<pre>
  :dd
</pre>

<p>
Efface 20 lignes à partir du curseur
</p>

<pre>
  :d20
</pre>

<p>
Active la coloration syntaxique (<i>off</i> pour désactiver).
</p>

<pre>
  :set syntax on
</pre>

<p>
Active un jeu de couleur (pour la coloration syntaxique) plus lisible pour les terminaux à fond sombre.
</p>

<pre>
  :set background=dark
</pre>

<p>
Affiche les numéros de lignes. <i>nonumber</i> pour les masquer.
</p>

<pre>
  :set number
</pre>

<a id="toc32" name="toc32"></a>
<h3>5.11.3. Raccourcis claviers</h3>

<p>
Raccourcis clavier du mode commande :
</p>

<ul>
<li><i>x</i> : Supprime le caractère sous le curseur.
</li>
<li><i>j</i> : Déplace le curseur sur la ligne du dessous.
</li>
<li><i>k</i> : Déplace le curseur sur la ligne du dessus.
</li>
<li><i>h</i> : Déplace le curseur d'un caractère vers la gauche.
</li>
<li><i>l</i> : Déplace le curseur d'un caractère vers la droite.
</li>
<li><i>A</i> : Envoie le curseur a la fin de la ligne courante et bascule en mode insertion.
</li>
<li><i>u</i> : Undo. Annule la dernière commande. <i>u&lt;N&gt;</i> Permet d'annuler les <i>&lt;N&gt;</i> dernières commandes.
</li>
<li><i>Ctrl-R</i> : Redo. Permet de refaire le dernier changement défait.
</li>
</ul>

<a id="toc33" name="toc33"></a>
<h3>5.11.4. Copier/coller</h3>

<ul>
<li>Positionner le curseur au début de la zone à copier ou couper.
</li>
<li>Appuyer sur <i>v</i> pour débuter la sélection.
</li>
<li>Déplacer le curseur à la fin de la zone à copier ou couper.
</li>
<li>Appuyer sur <i>d</i> (delete) pour couper ou sur <i>y</i> (yank) pour copier.
</li>
<li>Déplacer le curseur vers la zone cible de la copie ou du déplacement.
</li>
<li>Appuyer sur <i>p</i> pour coller après le curseur ou <i>P</i> pour coller avant le curseur.
</li>
</ul>

<a id="toc34" name="toc34"></a>
<h3>5.11.5. Comparaison de fichier</h3>

<p>
Une option très pratique de vim est l'option <i>-d</i> qui permet de comparer deux fichiers. Elle s'utilise de la façon
suivante :
</p>

<pre>
  vim -d //fichier1// //fichier2//
</pre>

<p>
L'éditeur s'ouvre alors avec <i>fichier1</i> dans la partie gauche de l'écran et <i>fichier2</i> sur la partie droite. Les
différences entre les deux fichiers sont mises en évidence, et il est possible d'utiliser les raccourcis claviers
suivants :
</p>
<p>
Récupère la différence courante depuis <i>fichier2</i> et l'insère dans <i>fichier1</i>
</p>

<pre>
  :diffget 
</pre>

<p>
Envoi la différence courante de <i>fichier1</i> vers <i>fichier2</i>
</p>

<pre>
  :diffput
</pre>

<p>
Déplace le curseur sur la prochaine différence :
</p>

<pre>
  ]c
</pre>

<p>
Déplace le curseur sur la différence précédente :
</p>

<pre>
  [c
</pre>

<p>
Passer d'un panneau à l'autre
</p>

<pre>
  Ctrl-W
</pre>

<a id="toc35" name="toc35"></a>
<h1>6. Informations Système</h1>

<a id="toc36" name="toc36"></a>
<h2>6.1. dmesg</h2>

<p>
La commande <i>dmesg</i> est utilisée la plupart du temps pour afficher le tampon des messages du noyau. C'est une commande
pratique pour consulter les logs de démarrage du système.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche le tampon des messages du noyau
</p>

<pre>
  dmesg
</pre>

<a id="toc37" name="toc37"></a>
<h2>6.2. free</h2>

<p>
La commande <i>free</i> permet d'afficher la quantité totale de mémoire physique et de swap disponible.
3 lignes sont affichées par la sortie de cette commande.
</p>
<p>
La première ligne concerne la mémoire physique, avec les colonnes suivantes :
</p>

<ul>
<li><b>total</b> : Indique la quantité de mémoire totale.
</li>
<li><b>used</b> : Indique la quantité de mémoire actuellement utilisée.
</li>
<li><b>free</b> : Indique la quantité de mémoire disponible (utilisée ni par les processus, ni par le kernel comme cache)
</li>
<li><b>shared</b> : Indique la quantité de mémoire partagée par plusieurs processus.
</li>
<li><b>buffers</b> : Indique la quantité de mémoire utilisée par le kernel pour accélérer les accès disque. Cette mémoire reste
  disponible pour les processus, et peut être libérée dès que des applications en ont besoin. Les appels systèmes
  <i>read()</i> et <i>write()</i> utilisent ce buffer, qui peut grandement accèlerer l'accès aux données par des applications
  qui font des entrées-sorties.
</li>
<li><b>cached</b> : Indique le nombre de pages mémoire cachées par le kernel pour accélèrer des accès futurs.
</li>
</ul>

<p>
Comme la mémoire utilisée pour les buffers et les caches peut facilement être restituée aux applications, la seconde
ligne  <i>-/+ buffers/cache</i> récapitule la quantité de mémoire physique actuellement allouée a des applications (1e
colonne), ainsi que la quantité de mémoire disponible pour les applications (seconde colonne). C'est cette ligne qui
indique <i>"Combien de RAM il reste"</i>. Pour cette ligne, le calcul est donc fait de la façon suivante :
</p>

<ul>
<li>+/- buffer/cache used = Memory used (1e ligne) - (buffers (1e ligne) + cache (1e ligne))
</li>
<li>+/- buffer/cache  free = Memory free (1e ligne + buffers (1e ligne) + cache (1e ligne)
</li>
</ul>

<p>
La dernière ligne concerne le Swap.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Affiche les quantités de mémoire et le swap en kilo-octets.
</p>

<pre>
  free -k
</pre>

<p>
Affiche les quantités de mémoire et le swap en méga-octets, avec une ligne qui affiche les totaux pour chaque colonne
(<i>-t</i>).
</p>

<pre>
  free -m -t
</pre>

<a id="toc38" name="toc38"></a>
<h2>6.3. /proc/cpuinfo</h2>

<p>
Ce fichier contient des informations détaillées sur le ou les cores du CPU de la machine.
</p>
<p>
Afficher les informations du fichier <i>/proc/cpuinfo</i>
</p>

<pre>
  cat /proc/cpuinfo
</pre>

<a id="toc39" name="toc39"></a>
<h2>6.4. /proc/meminfo</h2>

<p>
Ce fichier contient des informations détaillées sur la RAM de la machine.
</p>
<p>
Afficher les informations du fichier <i>/proc/meminfo</i>
</p>

<pre>
  cat /proc/meminfo
</pre>

<a id="toc40" name="toc40"></a>
<h2>6.5. uname</h2>

<p>
La commande <i>uname</i> permet d'afficher notamment la version du noyau, ainsi que d'autres informations système.
</p>
<p>
Sortie la plus détaillée de la commande uname :
</p>

<pre>
  uname -a
</pre>

<a id="toc41" name="toc41"></a>
<h1>7. Autres commandes</h1>

<a id="toc42" name="toc42"></a>
<h2>7.1. mount</h2>

<p>
La commande <i>mount</i> permet de monter un système de fichier dans un répertoire de l'arborescence.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Monter une clef usb sous le répertoire <i>/media</i>
</p>

<pre>
  mount -t vfat /dev/sdb /media
</pre>

<p>
Monter une image ISO sous le répertoire <i>/cdrom</i>
</p>

<pre>
  mount -o loop monFichier.iso /cdrom
</pre>

<p>
Remonter la racine du système de fichier en read/write (pratique en mode recovery)
</p>

<pre>
  mount -o remount,rw /
</pre>

<a id="toc43" name="toc43"></a>
<h2>7.2. tar</h2>

<p>
La commande <i>tar</i> (pour <b>ta</b>pe <b>ar</b>chiver) permet de créer des archives contenant tout ou une partie de
l'arborescence du système de fichier. Elle a pour avantages de stocker dans l'archive l'état des permissions sur chaque
fichier ou répertoire du <i>path</i> à partir duquel l'archive est créée.
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Archive dans le fichier <i>backup.tar</i> le répertoire ///home/
</p>

<pre>
  tar cvf backup.tar /home
</pre>

<p>
Extrait le contenu de l'archive <i>backup.tar</i> dans le répertoire courant
</p>

<pre>
  tar xvf backup.tar
</pre>

<p>
Copie tous les fichiers et sous-répertoires du dossier courant vers le répertoire cible <i>/destination</i>
</p>

<pre>
  tar cf - * | ( cd /destination; tar xfp -)
</pre>

<a id="toc44" name="toc44"></a>
<h2>7.3. basename</h2>

<p>
La commande <i>basename</i> permet de supprimer le suffixe du nom de fichier passé en argument. Elle utilisée
principalement pour des traitements par lots sur des fichiers (voir exemples commande <i>find</i>).
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Retourne toto (toto.jpg avec le suffixe <i>.jpg</i> en moins).
</p>

<pre>
  basename toto.jpg .jpg
</pre>

<a id="toc45" name="toc45"></a>
<h1>8. Planification avec cron</h1>

<p>
La commande <i>crontab</i> permet de planifier des traitements à exécuter périodiquement. Cette commande édite un fichier
propre à l'utilisateur, et par sécurité la syntaxe est vérifiée avant la mise à jour du fichier. Si une erreur est
détectée, le fichier n'est pas sauvegardé. Chaque entrée du fichier (chaque ligne) correspond à une tâche à exécuter. La
syntaxe est la suivante :
</p>

<pre>
  mm hh jj MMM JJJ commande
</pre>

<ul>
<li><b>mm</b> correspond au minutes (0-59)
</li>
<li><b>hh</b> correspond aux heurese (0-23)
</li>
<li><b>jj</b> correspond au jour du mois (1-31)
</li>
<li><b>MMM</b> correspond au nom du mois sur 3 lettres (jan, feb, mar, etc ...) ou bien au numéro du mois (1-12)
</li>
<li><b>JJJ</b> correspond au nom du jour sur 3 lettres (mon, tue, wed, etc ...) ou bien au numéro du jour dans la semaine
  (0-7, avec 0=7=Dimanche)
</li>
</ul>

<p>
<b><u>Exemple</u></b> :
</p>
<p>
Editer le fichier de planification :
</p>

<pre>
  crontab -e
</pre>

<p>
Afficher le fichier de planification :
</p>

<pre>
  crontab -l
</pre>

<p>
<b><u>Exemples de crontab</u></b> :
</p>
<p>
Compresse tous les premiers du mois à 23h30 le fichier ~/archive.log
</p>

<pre>
   30 23 1 * * gzip -9 ~/archive.log
</pre>

<p>
Toutes les 5mn , supprime le fichier /tmp/test.tmp
</p>

<pre>
  */5 * * * * rm /tmp/test.tmp
</pre>

<a id="toc46" name="toc46"></a>
<h1>9. Notion de pipe</h1>

<p>
Le pipe (caractère |) permet de brancher la sortie d'une commande sur l'entrée d'une autre, afin d'enchainer des traitements, par exemple de filtrer un fichier texte :
</p>
<p>
<b><u>Exemple</u></b> :
</p>
<p>
Recherche la chaine <i>2012/08/01</i> dans le fichier access.log. La sortie du grep est ensuite branchée sur la commande
awk qui va afficher les colonnes 15 et 1 de la sortie, séparée par un espace. Pour finir on se branche sur la commande
<i>sort</i> qui va trier le tout par ordre décroissant (option <i>r</i>) en effectuant un tri numérique (option <i>n</i>).
</p>

<pre>
  grep "2012/08/01" access.log | awk '{ print $15 " " $1}' |sort -rn
</pre>

<hr class="heavy" />

<a id="toc47" name="toc47"></a>
<h1>10. Remerciements</h1>

<p>
Merci à N. Boussedra, D. Guérin, L. Courvoisier, G. Euzet et F. Minier pour leurs suggestions, et à F. Meaude pour la relecture.
</p>

<hr class="heavy" />

<a id="toc48" name="toc48"></a>
<h1>11. Bibliographie</h1>

<ul>
<li>[<a href="http://fr.wikipedia.org/wiki/Vim">http://fr.wikipedia.org/wiki/Vim</a>]
</li>
<li>[<a href="http://fr.wikipedia.org/wiki/Bourne-Again_shell">http://fr.wikipedia.org/wiki/Bourne-Again_shell</a>]
</li>
<li>[<a href="http://www.cyberciti.biz/tips/linux-unix-commands-cheat-sheets.html">http://www.cyberciti.biz/tips/linux-unix-commands-cheat-sheets.html</a>]
</li>
<li>[<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din</a>]
<p></p>
</li>
</ul>

<!-- xhtml code generated by txt2tags 2.6 (http://txt2tags.org) -->
<!-- cmdline: txt2tags commandes_unix.t2t -->
</body></html>
